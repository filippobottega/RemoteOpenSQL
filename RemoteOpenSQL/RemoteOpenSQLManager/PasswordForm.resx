<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        fnfzn/nv+cADn/z4Hz/+P/x//4Ph///wD/8=
</value>
  </data>
</root>